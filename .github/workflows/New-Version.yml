name: Create new version
run-name: ${{ github.actor }} creates new version
on:
  workflow_dispatch:
    inputs:
      MajVers:
        description: 'Hauptversion'
        required: true
        type: number

      MinVers:
        description: 'Nebenversion'
        required: true
        type: number

      PatchVers:
        description: 'Patchversion'
        required: true
        type: number

jobs:
  create-version:
    runs-on: ubuntu-latest
    env:
      VersTag: v${{ inputs.MajVers }}.${{ inputs.MinVers }}.${{ inputs.PatchVers }}
      DacTag: ${{ inputs.MajVers }}.${{ inputs.MinVers }}.${{ inputs.PatchVers }}.0

    permissions:
      issues: write
      pull-requests: write
      contents: write

    steps:
      - name: Initialisierung
        run: echo "Neue Version $VersTag anlegen."

      - name: Meilenstein erstellen
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api \
          --method POST \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{ github.repository }}/milestones \
          -f "title=$VersTag" \
          -f "description=## Neuerungen
          + xyz

          ## Fehlerbehebungen
          + xyz"

      - name: Repository abrufen
        uses: actions/checkout@v4

      - name: Branch erzeugen
        run: "git checkout -b $VersTag"

      - name: Branch veröffentlichen
        run: "git push --set-upstream origin $VersTag"

      - name: DacVersion aktualisieren
        working-directory: ${{ github.workspace }}
        run: |
          sed -i -e "s/<DacVersion>.*</<DacVersion>$DacTag</g" ./Latest/Latest.sqlproj
          sed -i -e "s/<DacVersion>.*</<DacVersion>$DacTag</g" ./SQL2017/SQL2017.sqlproj
          sed -i -e "s/<DacVersion>.*</<DacVersion>$DacTag</g" ./SQL2019/SQL2019.sqlproj

      - name: DacVersion Änderung anzeigen
        working-directory: ${{ github.workspace}}/Latest
        run: |
          cat Latest.sqlproj

      - name: VersionHistory aktualisieren
        working-directory: ${{ github.workspace }}/Latest
        run: |
          sed -i -e "s/SET @NewMajorVersion.*;/SET @NewMajorVersion = ${{ inputs.MajVers }};/" PD.sql
          sed -i -e "s/SET @NewMinorVersion.*;/SET @NewMinorVersion = ${{ inputs.MinVers }};/" PD.sql
          sed -i -e "s/SET @NewPatchVersion.*;/SET @NewPatchVersion = ${{ inputs.PatchVers }};/" PD.sql

      - name: VersionHistory Änderung anzeigen
        working-directory: ${{ github.workspace }}/Latest
        run: |
          cat PD.sql

      - name: Änderungen committen
        working-directory: ${{ github.workspace }}
        run: |
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git add ./Latest/Latest.sqlproj ./SQL2017/SQL2017.sqlproj ./SQL2019/SQL2019.sqlproj ./Latest/PD.sql
          git commit -m 'GitHub Action creates new version'
          git push

      - name: Issue Versionsprüfung erstellen
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh issue create \
          --title "Anforderung Mindestversion" \
          --milestone "$VersTag" \
          --body "Die Mindest Versions Anforderung für die neue Version $VersTag in der Datei **PreDep.sql** prüfen und entsprechend setzen."